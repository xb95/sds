#!/usr/bin/python
#
# sds -- Simple Document Storage
#
# This system assumes that your documents have some basic information
# and will do some very basic asserting to make sure that your data has
# at least a name.  This is to make it easier for us to print out later.
#
#    sds --host=localhost --port=6329 <verb> [objid] [field=value ...]
#
# e.g., (ignoring the server/port parameters)
#
#    sds dump
#    sds get 1
#    sds new type=server name=server1 ipmi.user=root ...
#    sds update_partial 1 name=newname ...
#    sds delete 1
#
# You can also get information from the JSON object returned by
# referencing a simple path. I.e.:
#
#    sds get 5 ipmi.ip
#
# written by Mark Smith <mark@qq.is>
#

import sys
import httplib
from json import loads, dumps
from optparse import OptionParser


def print_object_path(obj, path):
    '''Take an object, then parse a path and find the data at that path.'''
    cur = obj
    for which in path.split('.'):
        if which.isdigit() and type(cur) is list:
            cur = cur[which]
        elif type(cur) is dict:
            cur = cur[which]
        else:
            print 'Failure: not sure how to get the %s from %s' % (which, cur)
    if type(cur) is dict or type(cur) is list:
        print dumps(cur, sort_keys=True, indent=4)
    else:
        print cur


def print_object(obj, idonly=False, path=None):
    '''Print a single object out so we can see the details of it.'''
    if obj is None:
       return
    if idonly:
        print obj['id']
    elif path is not None:
        print_object_path(obj, path)
    else:
        print dumps(obj, sort_keys=True, indent=4)


def print_object_list(objlist, idonly=False, path=None):
    '''Print out a list of objects.'''
    for idx in objlist:
        obj = objlist[idx]
        if idonly:
            print obj['id']
        elif path is not None:
            print_object_path(obj, path)
        else:
            name = obj['hostname'] if 'hostname' in obj else '(none)'
            print '%-4d %s' % (obj['id'], name)


def main(argv):
    '''Where the fun begins.'''

    # parse out command line options
    p = OptionParser()
    p.add_option('-H', '--host', dest='host', default='localhost',
        help='Host to connect to', metavar='HOST')
    p.add_option('-p', '--port', dest='port', type='int', default=6329,
        help='Port to listen on', metavar='PORT')
    p.add_option('-i', '--id-only', dest='idonly', action='store_true',
        help='Only print the ID of returned records')
    (opts, args) = p.parse_args(argv)

    # require at least one arg
    if len(args) <= 1:
        print >>sys.stderr, "Not enough arguments"
        return 1

    # the rest of the data is now in args, build the URL
    verb = args[1]
    objid = args[2] if len(args) >= 3 and args[2].isdigit() else ''
    req_path = '/%s/%s' % (args[1], objid)

    # chomp the path off if there is one
    path = None
    if verb in ('get', 'find_only_one', 'dump', 'find_all') and '=' not in args[-1]:
        if verb == 'get': # must have objid
            path = args[-1] if len(args) >= 4 else None
        else:
            path = args[-1] if len(args) >= 3 else None
    if path is not None:
        del args[-1]

    # now build the reqobj
    obj = {}
    for kv in args[3 if objid else 2:]:
        if not '=' in kv:
            print >>sys.stderr, 'Parameter "%s" does not conform to expected key=value format' % kv
            return 1
        key, value = kv.split('=', 1)
        obj[key] = value

    # set the method to POST if we recognize the verb or if there is a payload
    method = 'POST' if len(obj) > 0 else 'GET'
    if verb in ('delete'):
        method = 'POST'
    payload = dumps(obj) if method == 'POST' else None

    # construct the request object to send it out
    conn = httplib.HTTPConnection('%s:%d' % (opts.host, opts.port))
    headers = {'Content-Type':'application/json'}
    if payload:
        headers['Content-Length'] = len(payload)
    try:
        conn.request(method, req_path, payload, headers)
        res = conn.getresponse()
    except httplib.HTTPException:
        print >>sys.stderr, 'Failed connecting to sds-server'
        return 1
    if res is None:
        print >>sys.stderr, 'Failed requesting resource'
        return 1

    # probably a JSON response, get it
    try:
        resobj = loads(res.read())
        conn.close()
    except ValueError:
        print >>sys.stderr, 'Failed parsing server response'
        return 1

    # protocol failure check
    if not resobj['success']:
        print >>sys.stderr, 'Failure: %s' % resobj['content']
        return 1

    # these are simple responses, we can handle them here
    if verb == 'new':
        print 'Object %s created.' % resobj['content']
    elif verb == 'delete':
        print 'Object %s deleted.' % objid
    elif verb == 'replace':
        print 'Object %s replaced.' % objid
    elif verb == 'update_partial':
        print 'Object %s updated.' % objid
    elif verb in ('get', 'find_only_one'):
        print_object(resobj['content'], opts.idonly, path)
    elif verb in ('dump', 'find_all'):
        print_object_list(resobj['content'], opts.idonly, path)
    else:
        print >>sys.stderr, 'Bad verb'
        return 1
    return 0


if __name__ == '__main__':
    sys.exit(main(sys.argv[0:]))
